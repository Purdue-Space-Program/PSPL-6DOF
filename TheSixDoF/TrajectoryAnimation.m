function TrajectoryAnimation(posArray, timeArray, dt, endTime, playbackSpeed, scaledAxes, output)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PSP FLIGHT DYNAMICS:
%
% Title: TrajectoryAnimation
% Author: Hudson Reynolds - Created: 8/25/2024
%
% Description: This function takes the position throughout the flight and
% displays it in a cool animation.
%
% Inputs: 
% posArray = array of all the positions generated by the 6 DoF [m]
% timeArray = array of time values [s]
% dt = time step
% endTime = ending time of animation
% playbackSpeed = speed up factor
% ScaledAxes = 0 -> scale axes to fit, 1 -> set to be square (match height bounds)
% output = 0 -> no output, 1 -> output GIF file
%
% Outputs:
% figure output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

figure(4)
curve = animatedline('LineWidth',1);
zlabel('Height (m)');
view(43,24);

if scaledAxes == 0
    % these will break when initial angle set to 0, will be fixed when wind is added
    xlim([min(posArray(3,:)),max(posArray(3,:))]);
    ylim([min(posArray(2,:)),max(posArray(2,:))]);
    zlim([min(posArray(1,:)),max(posArray(1,:))]);
else
    xlim([min(posArray(1,:)),max(posArray(1,:))]);
    ylim([min(posArray(1,:)),max(posArray(1,:))]);
    zlim([min(posArray(1,:)),max(posArray(1,:))]);
end

for i=1:endTime / dt
    addpoints(curve,posArray(3,i),posArray(2,i),posArray(1,i));
    title(sprintf("Rocket Trajectory in Earth Coordinates at time %.2f s", timeArray(i)));
    drawnow;
    pause(dt/playbackSpeed);
    grid on;

    if output == 1
        frame = getframe(gcf);
        img =  frame2im(frame);
        [img,cmap] = rgb2ind(img,256);
        if i == 1
            imwrite(img,cmap,'Outputs/TrajAnimation.gif','gif','LoopCount',Inf,'DelayTime',dt/playbackSpeed);
        else
            imwrite(img,cmap,'Outputs/TrajAnimation.gif','gif','WriteMode','append','DelayTime',dt/playbackSpeed);
        end
    end
end