function RotationsVisualizer(posArray, quatArray, timeArray, endTime, dt, playbackSpeed, output)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PSP FLIGHT DYNAMICS:
%
% Title: RotationsVisualizer
% Author: Hudson Reynolds - Created: 7/12/2024
%
% Description: This function takes the euler angle and position outputs of
% the rocket and graphs them in 3D to get a better grasp of the rocket
% orientation
%
% Inputs: 
% angleArray = array of all the angles generated by the 6 DoF
% posArray = array of all the positions generated by the 6 DoF
% timeArray = array of time values
% endTime = ending time of animation
% dt = time step
% playbackSpeed = speed up factor
% output = 0 -> no output, 1 -> output GIF file
%
% Outputs:
% figure output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% playback speed rate
playbackSpeed = 2;

posArrayTrans = transpose(posArray);

figure(6)

qs = quaternion([45,0,0],'eulerd','ZYX','frame');
qf = quaternion([-45,0,0],'eulerd','ZYX','frame');

ps = [0 0 0];
pf = [0 0 0];

patch = poseplot(qs,ps,'ENU', MeshFileName="Model.stl", ScaleFactor= 1, PatchFaceColor='r');
%xlim([0,1000]);
%ylim([0,max(posArray(2,:))]);
%zlim([0,max(posArray(1,:))]);
view(45,25);
axis square
%camroll(113)


xlabel("x")
ylabel("y")
zlabel("z");


for i = 1:5:length(posArray)
    q = quaternion(quatArray(:,i)');
    %position = [posArrayTrans(i,3),posArrayTrans(i,2),posArrayTrans(i,1)];
    position = posArrayTrans(i,:);
    set(patch,Orientation=q,Position=position);
    
    title(sprintf('Orientation at time %.1f s',timeArray(i)))
    drawnow
    pause(1/100);

    if output == 1
        frame = getframe(gcf);
        img =  frame2im(frame);
        [img,cmap] = rgb2ind(img,256);
        if i == 1
            imwrite(img,cmap,'RotationAnimation.gif','gif','LoopCount',Inf,'DelayTime',1/20);
        else
            imwrite(img,cmap,'RotationAnimation.gif','gif','WriteMode','append','DelayTime',1/20);
        end
    end
end